<?php

// A list of the domains in the form domain.tld => GO base URl:
// Ex: 	array(
//			'example.edu' 	=> 'http://go.example.edu/',
//			'example2.edu' 	=> 'http://web.example2.edu/go/',
//		);
global $institutions;
$institutions = array(
	'example.edu' 	=>	array(
		'base_uri'	=>	'http://go.example.edu/',
		'logo_html'	=> '<a href="http://www.example.edu">
					<img class="headerLogo" src="http://www.example.edu/logo.gif" alt="Click here to return to Example College home page" />
				</a>',
		'header' => 'header_file.php',
		'footer' => 'footer_file.php',
	),
	'example2.edu' 	=>	array(
		'base_uri'	=>	'http://web.example2.edu/go/',
		'logo_html'	=> '<a href="http://www.example2.edu">
					<img class="headerLogo" src="http://www.example2.edu/logo.gif" alt="Click here to return to Example2 College home page" />
				</a>',
		'header' => 'header_file.php',
		'footer' => 'footer_file.php',
	),
);

/* DATABASE */
// Database Name
define("GO_DATABASE_NAME", "go");

// Host of the Database server
define("GO_DATABASE_HOST", "database.example.com");

// Username with SELECT, INSERT, UPDATE, and DELETE on the Database
define("GO_DATABASE_USER", "testuser");

// Password for the Database user
define("GO_DATABASE_PASS", "testpassword");

// Authentication method
define("AUTH_METHOD", "cas");

/* LDAP AUTHENTICATION */
// CN of a user to do the initial bind
define("GO_AUTH_LDAP_USER", "User, Dummy");

// Password for the LDAP bind user
define("GO_AUTH_LDAP_PASS", "password");

// Host of the LDAP server
define("GO_AUTH_LDAP_HOST", "example.com");

// Port of the LDAP server
define("GO_AUTH_LDAP_PORT", "389");

// LDAP Path in which to search for users
define("GO_AUTH_LDAP_PATH", "DC=example,DC=com");

// LDAP attribute you will use for the internal user ID
define("GO_AUTH_LDAP_ATTR_ID", "cn");

// LDAP attribute you will use for the username
define("GO_AUTH_LDAP_ATTR_NAME", "samaccountname");

// LDAP attribute you will use for the email
define("GO_AUTH_LDAP_ATTR_EMAIL", "mail");

/* CAS AUTHENTICATION */
// Filesystem path to a logging file
define("GO_AUTH_CAS_LOG", "/tmp/go-cas.log");

// Host of CAS server
define("GO_AUTH_CAS_HOST", "login.example.com");

// Port of CAS server
define("GO_AUTH_CAS_PORT", 443);

// Path to CAS login script
define("GO_AUTH_CAS_PATH", "/cas");

// Path to proxy granting ticket script
define("GO_AUTH_CAS_PGT", "https://go.example.com/storePGT.php");

// Filesystem path to proxy granting ticket store
define("GO_AUTH_CAS_PGTSTORE", "/var/store");

// CAS attribute you will use for the internal user ID
define("GO_AUTH_CAS_ATTR_ID", "Id");

// CAS attribute you will use for the username
define("GO_AUTH_CAS_ATTR_NAME", "Login");

// CAS attribute you will use for the email
define("GO_AUTH_CAS_ATTR_EMAIL", "EMail");

/* SAML AUTHENTICATION */
define("SAML_IDP_ENTITY_ID", "https://sts.windows.net/xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/");
define("SAML_IDP_SINGLE_SIGNON_SERVICE_URL", "https://login.microsoftonline.com/xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/saml2");
define("SAML_IDP_SINGLE_LOGOUT_SERVICE_URL", "https://login.microsoftonline.com/xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/saml2");
define("SAML_IDP_X509_CERT", "");


// Directory lookup configuration
define('DIRECTORY_ADMIN_ACCESS_KEY', 'passphrase');
define('DIRECTORY_BASE_URL', 'https://login.example.edu/directory/');


define('GET_USER_DISPLAY_NAME_CALLBACK', 'my_lookup_displayname');
function my_lookup_displayname($id) {
	return $id;
}

//AD groups allowed to authenticate against GO.
$allowedGroups = array();

//set array $goAdmins that holds the user ids of those
//who should be able to access the admin pages
$goAdmin = array(
);

//users who can view details (history, flags, user-to-code lists).
$goAuditors = array(
);

//allow anonymous user to flag codes as inappropriate (true or false)
define("ANON_FLAGGING", true);

//require a reason be filled in for flagging a code, true or false
define("REASON_FOR_FLAGGING_REQUIRED", true);

//email address that alert emails from the go application will be from
define("GO_ALERTS_EMAIL_ADDRESS", 'nobody@example.com');

//the name that alert emails from the go application will be from
define("GO_ALERTS_EMAIL_NAME", 'example name');

//takes 'all', 'authenticated', or 'superadmin'. Will allow anyone
//only authenticated users, or only superadmins to hide/show hidden codes respectively
define("GO_SHOW_ALL_CODES_ACCESS", 'superadmin');

//public and private recaptcha keys go here
define("RECAPTCHA_PUBLIC", '');
define("RECAPTCHA_PRIVATE", '');

//array of regex for internal hosts ending with, other hosts will be dealt with as external
$internal_hosts = array(
	'#example.edu$#',
);

//HTML for contacting/submitting a request for help with the application
define("GO_HELP_HTML", "<a href='#'>our help area.</a>");
